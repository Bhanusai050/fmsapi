//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FmsAPI.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FarmManagementSystemEnities : DbContext
    {
        public FarmManagementSystemEnities()
            : base("name=FarmManagementSystemEnities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AnimalBatch> AnimalBatches { get; set; }
        public virtual DbSet<Animal> Animals { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ContactMessage> ContactMessages { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<Feed_Consumption> Feed_Consumption { get; set; }
        public virtual DbSet<Feed_Inventory> Feed_Inventory { get; set; }
        public virtual DbSet<FeedPurchas> FeedPurchases { get; set; }
        public virtual DbSet<IdLookup> IdLookups { get; set; }
        public virtual DbSet<IdLookupValue> IdLookupValues { get; set; }
        public virtual DbSet<Investment> Investments { get; set; }
        public virtual DbSet<LandPurchas> LandPurchases { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PasswordResetToken> PasswordResetTokens { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Production> Productions { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
    
        public virtual int AddAnimalToBatch(Nullable<int> batchID, string animalName, Nullable<System.DateTime> birthDate, Nullable<int> animalTypeID, Nullable<int> genderID, Nullable<int> healthStatusID, Nullable<decimal> animalCost, Nullable<int> vendorID, Nullable<int> animalStatusID, Nullable<System.DateTime> animalPurchasedDate)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var animalNameParameter = animalName != null ?
                new ObjectParameter("AnimalName", animalName) :
                new ObjectParameter("AnimalName", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var animalTypeIDParameter = animalTypeID.HasValue ?
                new ObjectParameter("AnimalTypeID", animalTypeID) :
                new ObjectParameter("AnimalTypeID", typeof(int));
    
            var genderIDParameter = genderID.HasValue ?
                new ObjectParameter("GenderID", genderID) :
                new ObjectParameter("GenderID", typeof(int));
    
            var healthStatusIDParameter = healthStatusID.HasValue ?
                new ObjectParameter("HealthStatusID", healthStatusID) :
                new ObjectParameter("HealthStatusID", typeof(int));
    
            var animalCostParameter = animalCost.HasValue ?
                new ObjectParameter("AnimalCost", animalCost) :
                new ObjectParameter("AnimalCost", typeof(decimal));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var animalStatusIDParameter = animalStatusID.HasValue ?
                new ObjectParameter("AnimalStatusID", animalStatusID) :
                new ObjectParameter("AnimalStatusID", typeof(int));
    
            var animalPurchasedDateParameter = animalPurchasedDate.HasValue ?
                new ObjectParameter("AnimalPurchasedDate", animalPurchasedDate) :
                new ObjectParameter("AnimalPurchasedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAnimalToBatch", batchIDParameter, animalNameParameter, birthDateParameter, animalTypeIDParameter, genderIDParameter, healthStatusIDParameter, animalCostParameter, vendorIDParameter, animalStatusIDParameter, animalPurchasedDateParameter);
        }
    
        public virtual int AddCustomerOrder(Nullable<int> customerID, Nullable<System.DateTime> orderDate, string paymentStatus, string orderStatus, Nullable<int> productionID, Nullable<decimal> quantity, Nullable<decimal> unitPrice)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerOrder", customerIDParameter, orderDateParameter, paymentStatusParameter, orderStatusParameter, productionIDParameter, quantityParameter, unitPriceParameter);
        }
    
        public virtual int AddExpense(Nullable<System.DateTime> date, string type, Nullable<decimal> amount, Nullable<int> linkedFeedID, Nullable<int> linkedAnimalID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var linkedFeedIDParameter = linkedFeedID.HasValue ?
                new ObjectParameter("LinkedFeedID", linkedFeedID) :
                new ObjectParameter("LinkedFeedID", typeof(int));
    
            var linkedAnimalIDParameter = linkedAnimalID.HasValue ?
                new ObjectParameter("LinkedAnimalID", linkedAnimalID) :
                new ObjectParameter("LinkedAnimalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddExpense", dateParameter, typeParameter, amountParameter, linkedFeedIDParameter, linkedAnimalIDParameter);
        }
    
        public virtual int AddFeedConsumption(Nullable<int> animalID, Nullable<int> feedID, Nullable<decimal> quantity, Nullable<System.DateTime> date)
        {
            var animalIDParameter = animalID.HasValue ?
                new ObjectParameter("AnimalID", animalID) :
                new ObjectParameter("AnimalID", typeof(int));
    
            var feedIDParameter = feedID.HasValue ?
                new ObjectParameter("FeedID", feedID) :
                new ObjectParameter("FeedID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFeedConsumption", animalIDParameter, feedIDParameter, quantityParameter, dateParameter);
        }
    
        public virtual int AddFeedPurchase(Nullable<int> vendorID, Nullable<int> feedTypeID, Nullable<decimal> quantity, Nullable<decimal> cost, Nullable<System.DateTime> purchaseDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var feedTypeIDParameter = feedTypeID.HasValue ?
                new ObjectParameter("FeedTypeID", feedTypeID) :
                new ObjectParameter("FeedTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFeedPurchase", vendorIDParameter, feedTypeIDParameter, quantityParameter, costParameter, purchaseDateParameter);
        }
    
        public virtual int AddProduction(Nullable<System.DateTime> date, string type, Nullable<decimal> quantity, Nullable<int> animalID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var animalIDParameter = animalID.HasValue ?
                new ObjectParameter("AnimalID", animalID) :
                new ObjectParameter("AnimalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduction", dateParameter, typeParameter, quantityParameter, animalIDParameter);
        }
    
        public virtual int AddSalary(Nullable<int> workerID, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string notes)
        {
            var workerIDParameter = workerID.HasValue ?
                new ObjectParameter("WorkerID", workerID) :
                new ObjectParameter("WorkerID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSalary", workerIDParameter, paymentDateParameter, amountParameter, notesParameter);
        }
    
        public virtual ObjectResult<GetAnimalsByBatch_Result> GetAnimalsByBatch(Nullable<int> batchID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnimalsByBatch_Result>("GetAnimalsByBatch", batchIDParameter);
        }
    }
}
